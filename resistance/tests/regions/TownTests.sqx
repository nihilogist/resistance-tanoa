/*
 * Name:	TownTests
 * Date:	05/08/2019
 * Version: 1.0
 * Author:  dave3
 *
 * Description:
 * Tests for the Town class
 */
using Sqx.UnitTest;
using dave3;
 
namespace dave3.tests
{
	public class TownTests
	{
		// Registeres the test methods and performs general initializations.
		public static method Init
		{
			// All test methods in this test class expected to run automatically are to be registered in 
			// the test framework like this.
			// First argument is the name space name of this test class.
			// Second argument is the class name of this test class.
			// Third argument is an array containing the names of all the methods that should be registered.
			
			["dave3.tests", "TownTests", [
				"GivenTownCreatedWithArray_WhenRequestingSaveData_ExpectItToBeTheSame",
				"GivenTownCreatedWith2Gendarmes_WhenRequestingGendarmePatrols_Expect1"
			]] call TestEngine.Register;
		};
		
		// If we initialise a town then we expect to get it back in the same state
		private static method GivenTownCreatedWithArray_WhenRequestingSaveData_ExpectItToBeTheSame {
			private ["_townData" as Array, "_result" as Array, "_town" as Town];
		
			_townData = [["Leqa",
							0,
							["gendarmeLeqaPatrol01", "gendarmeLeqaPatrol02", "gendarmeLeqaPatrol03", "gendarmeLeqaPatrol04"]
						]];
			// Arrange
			_town = _townData new Town;
			
			// Act
			_result = call _town.getSaveableData;
			
			// Assert
			[_result isEqualTo _townData, "Town does not return values given."] call Assert.IsTrue;
		};
		
		// If we initialise a town then we expect to get it back in the same state
		private static method GivenTownCreatedWith2Gendarmes_WhenRequestingGendarmePatrols_Expect1 {
			private ["_townData" as Array, "_result" as Scalar, "_town" as Town];
		
			_townData = [["Leqa",
							2,
							["gendarmeLeqaPatrol01", "gendarmeLeqaPatrol02", "gendarmeLeqaPatrol03", "gendarmeLeqaPatrol04"]
						]];
			// Arrange
			_town = _townData new Town;
			
			// wait for units to spawn??
			sleep 1;
			
			// Act
			_result = count (_town.gendarmePatrols);
			
			// Assert
			[_result, 1, "Expected only one gendarme patrol."] call Assert.AreEqual;
		};
	};
};

