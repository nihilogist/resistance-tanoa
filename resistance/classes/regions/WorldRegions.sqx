/*
 * Name:	World
 * Date:	04/08/2019
 * Version: 1.0
 * Author:  dave3
 *
 * Description:
 * Represents the whole world (island)
 */
namespace dave3
{
	public class WorldRegions : ISaveable
	{
		
		public property String worldName { get; private set; };
		public property Array regions { get; private set; };
		public property Array caches { get; private set; };
		
		
		// Creates a World object.
		public constructor {
			params ["_worldData" as Array];

			private ["_regionsData" as Array, "_region" as Region, "_cacheData" as Array, "_cache" as AmmoDump];
			
			[["WORLDREGIONS: Received world data to construct world state", _worldData], LogLevel.Debug] call missionLogger.logMessage;

			_self.worldName = _worldData select 0;
			_regionsData = _worldData select 1;
			_cacheData = (_worldData select 2) select 0;
			
			[["WORLDREGIONS: Initialising ", (count _regionsData), " regions"], LogLevel.Info] call missionLogger.logMessage;
			_self.regions = [];
			// Iterate over all regions and create them
			{
				_region = [_x] new Region;
				_self.regions pushBack _region;
			} forEach _regionsData;
			
			
			[["WORLDREGIONS: Initialising ", (count _cacheData), " caches"], LogLevel.Info] call missionLogger.logMessage;
			[["WORLDREGIONS: Ammo cache data: ", _cacheData], LogLevel.Debug] call missionLogger.logMessage;
			_self.caches = [];
			// Iterate over all ammunition caches and create them
			{
				[["Generating Ammo Cache - ", _x], LogLevel.Debug] call missionLogger.logMessage;
				_cache = [_x] new AmmoDump;
				_self.caches pushBack _cache;
			} forEach _cacheData;
			
		};
		
		
		public method Array getSaveableData {
			private ["_saveData" as Array, "_saveableRegions" as Array, "_saveableRegion" as Array, "_saveableAmmoDumps" as Array];
			
			_saveableRegions = [];
			_saveableAmmoDumps = [];
			
			// Get all regions to save
			{
				_saveableRegion = [] call _x.getSaveableData;
				_saveableRegions pushBack _saveableRegion;
			} forEach _self.regions as Region;
			
			// Get all ammo caches to save
			{
				_saveableAmmoDumps pushBack ([] call _x.getSaveableData);
			} forEach _self.caches as AmmoDump;
			
			_saveData = [[
				_self.worldName,
				_saveableRegions,
				[_saveableAmmoDumps]
			]];
			
			[["World state data for saving: ", _saveData], LogLevel.Debug] call missionLogger.logMessage;
			
			_saveData
		};
	
		
		public method Region getRegionByName("_regionName" as String) {
			private ["_regionToReturn" as Region];
			{
				if (_x.regionName isEqualTo _regionName) then {
					_regionToReturn = _x;
				};
			} forEach _self.regions as Region;
			_regionToReturn
		};
	
	};
	
};

