call compile preprocessFileLineNumbers "resistance\interfaces\compile-all-interfaces.sqx";
call compile preprocessFileLineNumbers "resistance\classes\compile-all-classes.sqx";

using dave3;

private ["_saveManager" as SaveManager, "_gameMaster" as GameMaster, "_savedWorldData" as Array];

sleep 3;



// Initialise singletons
missionLogger = [LogLevel.Debug] new LoggerUtil;
[["---"], LogLevel.Info] call missionLogger.logMessage;
[["---"], LogLevel.Info] call missionLogger.logMessage;
[["---"], LogLevel.Info] call missionLogger.logMessage;
[["---"], LogLevel.Info] call missionLogger.logMessage;
[["---"], LogLevel.Info] call missionLogger.logMessage;
[["Logger initialised"], LogLevel.Info] call missionLogger.logMessage;

_saveManager = [nukeTheSave, saveGameName, 30] new SaveManager;
_gameMaster = [] new GameMaster;

// Check to see if world can be loaded
_savedWorldData = call _saveManager.getSavedData;


[["INIT: Parsing saved world data", _savedWorldData]] call missionLogger.logMessage;


if (count _savedWorldData == 0) then {
	[["INIT: No world data in save file."]] call missionLogger.logMessage;
	_savedWorldData = [worldData];
} else {
	[["INIT: Selecting world data from save file"]] call missionLogger.logMessage;
};

[["INIT: Using world data to construct world state: ", _savedWorldData], LogLevel.Info] call missionLogger.logMessage;

theWorld = (_savedWorldData) new WorldRegions;

// Once the world is initialised, then set it into the save manager and request a save.
[theWorld] call _saveManager.setWorldToSave;
[] call _saveManager.requestSave;
[] call _saveManager.RunAsync;
[] call _saveManager.runAutosaveAsync;


// Give a little while for the objects to initialise
sleep 10;

// Start the game master
[] call _gameMaster.startGameMasterAsync; 